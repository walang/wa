; primitive

; foundation -----------------------------------------------------------------
; assignment and place -------------------------------------------------------

; boolean --------------------------------------------------------------------

(xdef no not)

; iteration ------------------------------------------------------------------
; condition ------------------------------------------------------------------

; evaluation -----------------------------------------------------------------

(xdef eval wa-eval)
(xdef apply)
(xdef ssexpand expand-ssyntax)
(xdef ssyntax? ssyntaxp)

; list -----------------------------------------------------------------------

(xdef car)
(xdef cdr)
(xdef caar)
(xdef cadr)
(xdef cddr)
(xdef cons)
(xdef copylist copy-list)
(xdef list)

(xdef len (x)
  (etypecase x
    (sequence   (length x))
    (hash-table (hash-table-count x))))

; macro ----------------------------------------------------------------------

(xdef annotate tag)

(xdef uniq gensym)

(xdef macex)

(xdef macex1 (e)
  (macex e 'once))

; math -----------------------------------------------------------------------

; XXX
(xdef + (&rest args)
  (if (not args)
      0
      (etypecase (car args)
        (number (apply #'+ args))
        (list   (apply #'append args))
        (t      (format nil "~{~@[~a~]~}" args)))))

(xdef -)
(xdef *)
(xdef /)
(xdef mod)
(xdef expt)
(xdef sqrt)
(xdef sin)
(xdef cos)
(xdef tan)
(xdef asin)
(xdef acos)
(xdef atan)
(xdef log)

(xdef rand (&optional (n 1))
  (random n))

(xdef trunc (n)
  (values (truncate n)))

; number
; positive
; abs
; round
; roundup
; nearest
; median
; med
; avg

(xdef even? evenp)
(xdef odd? oddp)

; max
; min
; multiple

; predicate ------------------------------------------------------------------

; XXX
(cl (defun pairwise (pred lst)
      (loop for x in lst
            for y in (cdr lst)
            always (funcall pred x y))))

; XXX
(xdef > (&rest args)
  (etypecase (car args)
    (number    (apply #'> args))
    (string    (pairwise #'string> args))
    (symbol    (pairwise #'string> args))
    (character (pairwise #'char> args))
    (t         (apply #'> args))))

; XXX
(xdef < (&rest args)
  (etypecase (car args)
    (number    (apply #'< args))
    (string    (pairwise #'string< args))
    (symbol    (pairwise #'string< args))
    (character (pairwise #'char< args))
    (t         (apply #'< args))))

; XXX
(xdef >= (&rest args)
  (etypecase (car args)
    (number    (apply #'>= args))
    (string    (pairwise #'string>= args))
    (symbol    (pairwise #'string>= args))
    (character (pairwise #'char>= args))
    (t         (apply #'>= args))))

; XXX
(xdef <= (&rest args)
  (etypecase (car args)
    (number    (apply #'<= args))
    (string    (pairwise #'string<= args))
    (symbol    (pairwise #'string<= args))
    (character (pairwise #'char<= args))
    (t         (apply #'<= args))))

(xdef bound? wa-boundp)

(xdef exact? integerp)

; is
; dotted?
; isa

(xdef atom)
(xdef cons? consp)
(xdef list? listp)

; string ---------------------------------------------------------------------

(xdef newstring make-string)
(xdef newstr make-string)

; table ----------------------------------------------------------------------

(xdef table ()
  (make-hash-table :test 'equal))

(xdef maptable maphash)

; type -----------------------------------------------------------------------

(xdef rep)

(xdef coerce (x type &optional args)
  (cond
    ((taggedp x) (error "Can't coerce annotated object"))
    ;((eql type (ar-type x) x))
    ((characterp x) (case type
                      (int    (char-code x))
                      (string (string x))
                      (sym    (intern (string x)))
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((integerp x)   (case type
                      (num    x)
                      (char   (code-char x))
                      (string (write-to-string x :base (or argsopt 10.)))
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((numberp x)    (case type
                      (int    (round x))
                      (char   (code-char (round x)))
                      (string (write-to-string x :base (or argsopt 10.)))
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((stringp x)    (case type
                      (sym    (intern x))
                      (cons   (coerce x 'list))
                      (num    (values (parse-integer x :radix (or args 10.))))
                      (int    (round (values (parse-integer x :radix (or args 10.)))))
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((consp x)      (case type
                      (string (coerce x 'string))
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((null x)       (case type
                      (string "")
                      (t      (error "Can't coerce ~a ~a" x type))))
    ((symbolp x)    (case type
                      (string (symbol-name x))
                      (t      (error "Can't coerce ~a ~a" x type))))
    (t              x)))

; variable -------------------------------------------------------------------

; networking -----------------------------------------------------------------

(xdef client-ip usocket:get-peer-address)

(xdef open-socket (num)
  (usocket:socket-listen "localhost"
                         num
                         :reuseaddress t
                         :element-type '(unsigned-byte 8)))

(xdef socket-accept (s)
  (usocket:socket-accept s))

; atomic ---------------------------------------------------------------------

(cl (defparameter *wa-mutex* (sb-thread:make-mutex :name "wa")))

(xdef atomic-invoke (f)
  (with-mutex (*wa-mutex*)
    (funcall f)))

; OS -------------------------------------------------------------------------

(xdef memory sb-vm:memory-usage)

(xdef system (cmd)
  (run-program "/bin/sh" (list "-c" cmd) :search t :output *standard-output*)
  nil)

(xdef pipe-from (cmd)
  (process-output (run-program "/bin/sh" (list "-c" cmd) :output :stream)))

(xdef quit exit)

; I/O ------------------------------------------------------------------------

(xdef readb (&optional (input-port *standard-input*))
  (read-byte input-port nil nil))

(xdef readc (&optional (input-port *standard-input*))
  (read-char input-port nil nil nil))

(xdef peekc (&optional (input-port *standard-output*))
  (peek-char nil input-port nil nil nil))

; readline

(xdef sread (p eof)
  (let ((expr (read p nil eof)))
    (if (eq eof expr) eof expr)))

; read
; readstring1
; saferead
; readall
; load

(xdef disp princ)

(xdef write prin1)

(xdef writeb (i)
  (write-byte i *standard-output*))

(xdef writec write-char)

(xdef pr (&rest args)
  (format t "~{~A~}" args))

(xdef prn (&rest args)
  (format t "~{~A~}~%" args))

; prall
; prs
; prf
; out
; parse-format
; ero
; warn

(xdef infile (name)
  (open name :direction :input))

(xdef outfile (name)
  (open name :direction :output
             :if-exists :supersede
             :if-does-not-exist :create))

(xdef stdin () *standard-input*)
(xdef stdout () *standard-output*)
(xdef stderr () *error-output*)

(xdef call-w/stdin (input-port thunk)
  (with-open-stream (*standard-input* input-port)
    (funcall thunk)))

(xdef call-w/stdout (output-port thunk)
  (with-open-stream (*standard-output* output-port)
    (funcall thunk)))

(xdef instring make-string-input-stream)

(xdef outstring make-string-output-stream)

(xdef inside get-output-stream-string)

(xdef flushout ()
  (force-output *standard-output*)
  t)

; TODO: force-close
(xdef close (&rest args)
  (mapcar (lambda (p)
            (cond ((output-stream-p p) (close p :abort t))
                  ((input-stream-p p)  (close p :abort t))
                  ((usocket:stream-server-usocket-p p)(usocket:socket-close p))
                  (t (error "Can't close ~A" p))))
          args)
  nil)

; filesystem operations ------------------------------------------------------

;dir
;file-exists
;dir-exists
;rmfile
;mvfile

; thread ---------------------------------------------------------------------

(xdef new-thread (f)
  (sb-thread:make-thread f))

(xdef break-thread (th)
  (sb-thread:interrupt-thread th #'break))

(xdef kill-thread (th)
  (sb-thread:terminate-thread th))

(xdef current-thread ()
  sb-thread:*current-thread*)

(xdef sleep)

(xdef dead (x)
  (not (sb-thread:thread-alive-p x)))

; time -----------------------------------------------------------------------

(xdef current-process-milliseconds get-internal-run-time)

(xdef current-gc-milliseconds ()
  sb-ext:*gc-run-time*)

(xdef msec ()
  (* (sb-posix:time) 1000))

(xdef seconds ()
  (sb-posix:time))

(xdef timedate (&optional args)
  (multiple-value-bind (s m h d mo y)
                       (decode-universal-time (or args (get-universal-time))
                                              0)
    (list s m h d mo y)))

; error handling -------------------------------------------------------------

; point
; catch
; ccc

(xdef protect (during after)
  (unwind-protect (funcall during)
    (funcall after)))

;after

(xdef details (c)
  (format nil "~A" c))

(xdef err (&rest args)
  (error "~{~a~^:~@{ ~a~^~}~}" args))

(xdef on-err (errfn f)
  (handler-case (funcall f)
    (error (e) (funcall errfn e))))

; errsafe





(xdef load wa-load)
